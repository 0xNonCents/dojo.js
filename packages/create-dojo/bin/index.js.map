{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport https from 'https';\nimport spawn from 'cross-spawn';\nimport path from \"path\";\nimport * as fs from \"fs\";\n\nimport { input, select } from '@inquirer/prompts';\n\nconst templates = [\n    {\n        value: 'react-app',\n        description: 'React app using Dojo',\n    },\n    {\n        value: 'react-phaser-example',\n        description: 'React/Phaser app using Dojo',\n    },\n]\n\nrun();\n\nasync function run() {\n\n    try {\n        const { template, projectName } = await prompt();\n\n        // clone template using degit into projectName directory\n        console.log(`Downloading ${template}...`)\n        spawn.sync(\"npx\", [\"degit\", `dojoengine/dojo.js/examples/${template}`, `${projectName}`])\n\n        // rewrite package.json\n        await rewritePackageJson(projectName);\n\n        // clone dojo-starter\n        console.log(`Downloading dojo-starter...`)\n        spawn.sync(\"npx\", [\"degit\", `dojoengine/dojo-starter`, `dojo-starter`])\n\n    } catch (e: any) {\n        console.log(e)\n    }\n\n}\n\n\nasync function rewritePackageJson(projectName: string) {\n\n    const packageJsonPath = path.join(process.cwd(), projectName, 'package.json');\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf-8\"));\n    const latestVersion = await getLatestVersion();\n\n    // rename using projectName\n    packageJson.name = projectName;\n\n    // rewrite all link:dojo-packages/packages/... with latest version\n    for (let dep of Object.keys(packageJson.dependencies)) {\n        if (dep.startsWith(\"@dojoengine\") && packageJson.dependencies[dep].startsWith(\"link:\")) {\n            packageJson.dependencies[dep] = latestVersion\n        }\n    }\n\n    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n}\n\nasync function prompt(): Promise<{ template: string, projectName: string }> {\n\n    const template = await select({\n        message: 'Select a template',\n        choices: templates\n    });\n\n    const projectName = await input({\n        message: \"Project name \", validate: (input: string) => {\n            if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\n            else return 'Project name may only include letters, numbers, underscores and hashes.';\n        },\n        default: template\n    })\n\n    return { template, projectName }\n\n}\n\nasync function getLatestVersion(): Promise<string> {\n    return new Promise((resolve, reject) => {\n        https\n            .get(\n                'https://registry.npmjs.org/-/package/@dojoengine/core/dist-tags',\n                res => {\n                    if (res.statusCode === 200) {\n                        let body = '';\n                        res.on('data', data => (body += data));\n                        res.on('end', () => {\n                            resolve(JSON.parse(body).latest);\n                        });\n                    } else {\n                        reject();\n                    }\n                }\n            )\n            .on('error', () => {\n                reject();\n            });\n    });\n}"],"mappings":";;;AAEA,OAAO,WAAW;AAClB,OAAO,WAAW;AAClB,OAAO,UAAU;AACjB,YAAY,QAAQ;AAEpB,SAAS,OAAO,cAAc;AAE9B,IAAM,YAAY;AAAA,EACd;AAAA,IACI,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AACJ;AAEA,IAAI;AAEJ,eAAe,MAAM;AAEjB,MAAI;AACA,UAAM,EAAE,UAAU,YAAY,IAAI,MAAM,OAAO;AAG/C,YAAQ,IAAI,eAAe,QAAQ,KAAK;AACxC,UAAM,KAAK,OAAO,CAAC,SAAS,+BAA+B,QAAQ,IAAI,GAAG,WAAW,EAAE,CAAC;AAGxF,UAAM,mBAAmB,WAAW;AAGpC,YAAQ,IAAI,6BAA6B;AACzC,UAAM,KAAK,OAAO,CAAC,SAAS,2BAA2B,cAAc,CAAC;AAAA,EAE1E,SAAS,GAAQ;AACb,YAAQ,IAAI,CAAC;AAAA,EACjB;AAEJ;AAGA,eAAe,mBAAmB,aAAqB;AAEnD,QAAM,kBAAkB,KAAK,KAAK,QAAQ,IAAI,GAAG,aAAa,cAAc;AAC5E,QAAM,cAAc,KAAK,MAAS,gBAAa,iBAAiB,OAAO,CAAC;AACxE,QAAM,gBAAgB,MAAM,iBAAiB;AAG7C,cAAY,OAAO;AAGnB,WAAS,OAAO,OAAO,KAAK,YAAY,YAAY,GAAG;AACnD,QAAI,IAAI,WAAW,aAAa,KAAK,YAAY,aAAa,GAAG,EAAE,WAAW,OAAO,GAAG;AACpF,kBAAY,aAAa,GAAG,IAAI;AAAA,IACpC;AAAA,EACJ;AAEA,EAAG,iBAAc,iBAAiB,KAAK,UAAU,aAAa,MAAM,CAAC,CAAC;AAE1E;AAEA,eAAe,SAA6D;AAExE,QAAM,WAAW,MAAM,OAAO;AAAA,IAC1B,SAAS;AAAA,IACT,SAAS;AAAA,EACb,CAAC;AAED,QAAM,cAAc,MAAM,MAAM;AAAA,IAC5B,SAAS;AAAA,IAAiB,UAAU,CAACA,WAAkB;AACnD,UAAI,sBAAsB,KAAKA,MAAK;AAAG,eAAO;AAAA;AACzC,eAAO;AAAA,IAChB;AAAA,IACA,SAAS;AAAA,EACb,CAAC;AAED,SAAO,EAAE,UAAU,YAAY;AAEnC;AAEA,eAAe,mBAAoC;AAC/C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UACK;AAAA,MACG;AAAA,MACA,SAAO;AACH,YAAI,IAAI,eAAe,KAAK;AACxB,cAAI,OAAO;AACX,cAAI,GAAG,QAAQ,UAAS,QAAQ,IAAK;AACrC,cAAI,GAAG,OAAO,MAAM;AAChB,oBAAQ,KAAK,MAAM,IAAI,EAAE,MAAM;AAAA,UACnC,CAAC;AAAA,QACL,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,EACC,GAAG,SAAS,MAAM;AACf,aAAO;AAAA,IACX,CAAC;AAAA,EACT,CAAC;AACL;","names":["input"]}